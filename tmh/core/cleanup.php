<?php
// TMH by TCSE v0.9.0
// cleanup.php ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
// –†–µ–∂–∏–º: –≤–µ–± (—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º) –∏–ª–∏ CLI (—á–µ—Ä–µ–∑ cron)

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
$config = require_once __DIR__ . '/../data/config.php';

// === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ===
$token = $config['bot_token'];
$dbFile = $config['db_file'];
$secretKey = $config['secret_key'];
$logDir = $config['log_dir'] ?? __DIR__ . '/logs';
$enableLogging = $config['enable_logging'] ?? true;
$debug = $config['debug'] ?? false;

// === –ó–∞—â–∏—Ç–∞: –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ ===
$accessKey = $_GET['key'] ?? '';
$isCli = php_sapi_name() === 'cli';

if (!$isCli && $accessKey !== $secretKey) {
    http_response_code(403);
    echo "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.";
    exit;
}

// === –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
if ($enableLogging && !is_dir($logDir)) {
    mkdir($logDir, 0755, true);
}

// === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º: CLI –∏–ª–∏ –≤–µ–± ===
$output = [];
if (!$isCli) {
    header('Content-Type: text/html; charset=utf-8');
    echo '<!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–û—á–∏—Å—Ç–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { font-family: Arial, sans-serif; padding: 20px; background: #f4f4f4; color: #333; }
            .log { background: #fff; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin: 10px 0; font-size: 14px; line-height: 1.5; }
            .success { color: #2ecc71; }
            .error { color: #e74c3c; }
            .info { color: #3498db; }
            .warning { color: #f39c12; }
            h1 { color: #2c3e50; }
            .footer { margin-top: 30px; color: #7f8c8d; font-size: 12px; }
        </style>
    </head>
    <body>
        <h1>üßπ –û—á–∏—Å—Ç–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã</h1>
        <div id="output">';
}

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
function logMessage($text, $type = 'info', $isCli = false) {
    global $output, $enableLogging, $logDir, $debug;

    $time = date('H:i:s');
    $message = "[$time] $text";
    $output[] = ['text' => $message, 'type' => $type];

    if ($isCli && $debug) {
        $prefix = ['info' => '‚ÑπÔ∏è', 'success' => '‚úÖ', 'error' => '‚ùå', 'warning' => '‚ö†Ô∏è'][$type];
        echo "$prefix $message\n";
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if ($enableLogging && in_array($type, ['error', 'warning']) && !empty($logDir)) {
        $logFile = "$logDir/cleanup.log";
        file_put_contents($logFile, "$message\n", FILE_APPEND | LOCK_EX);
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã ===
if (!file_exists($dbFile)) {
    logMessage("–§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: $dbFile", 'error', $isCli);
    if (!$isCli) {
        echo '<div class="log error">‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: ' . htmlspecialchars($dbFile) . '</div>';
        echo '</div></body></html>';
    }
    exit;
}

$db = json_decode(file_get_contents($dbFile), true);
if (!is_array($db)) {
    logMessage("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã: $dbFile", 'error', $isCli);
    if (!$isCli) {
        echo '<div class="log error">‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã</div>';
        echo '</div></body></html>';
    }
    exit;
}

logMessage("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: " . count($db), 'info', $isCli);

$modified = false;
$removedCount = 0;
$updatedCount = 0;

foreach ($db as $fileId => $track) {
    $needsUpdate = false;

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ audio file_id ===
    $fileInfo = @json_decode(file_get_contents("https://api.telegram.org/bot$token/getFile?file_id=$fileId"), true);
    if (!$fileInfo['ok']) {
        logMessage("üóëÔ∏è –£–¥–∞–ª—ë–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–µ–∫: {$track['title']} (file_id)", 'error', $isCli);
        unset($db[$fileId]);
        $modified = true;
        $removedCount++;
        continue;
    } else {
        $newUrl = "https://api.telegram.org/file/bot$token/" . $fileInfo['result']['file_path'];
        if ($track['url'] !== $newUrl) {
            $db[$fileId]['url'] = $newUrl;
            logMessage("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞—É–¥–∏–æ: {$track['title']}", 'warning', $isCli);
            $needsUpdate = true;
            $updatedCount++;
        }
    }

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ photo_file_id (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
    if (!empty($track['photo_file_id'])) {
        $photoInfo = @json_decode(file_get_contents("https://api.telegram.org/bot$token/getFile?file_id=" . $track['photo_file_id']), true);
        if (!$photoInfo['ok']) {
            logMessage("üñºÔ∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {$track['title']} ‚Äî —É–¥–∞–ª–µ–Ω–∞", 'warning', $isCli);
            $db[$fileId]['photo_file_id'] = '';
            $db[$fileId]['photo_url'] = '';
            $needsUpdate = true;
            $updatedCount++;
        } else {
            $newPhotoUrl = "https://api.telegram.org/file/bot$token/" . $photoInfo['result']['file_path'];
            if ($track['photo_url'] !== $newPhotoUrl) {
                $db[$fileId]['photo_url'] = $newPhotoUrl;
                logMessage("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ–±–ª–æ–∂–∫–∏: {$track['title']}", 'warning', $isCli);
                $needsUpdate = true;
                $updatedCount++;
            }
        }
    }

    if ($needsUpdate) {
        $modified = true;
    }
}

// === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ===
if ($modified) {
    file_put_contents($dbFile, json_encode($db, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
    logMessage("‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –æ—Å—Ç–∞–ª–æ—Å—å " . count($db) . " —Ç—Ä–µ–∫–æ–≤.", 'success', $isCli);
} else {
    logMessage("‚úÖ –ë–∞–∑–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.", 'success', $isCli);
}

// === –í—ã–≤–æ–¥ –≤ –≤–µ–±–µ ===
if (!$isCli) {
    foreach ($output as $entry) {
        $class = $entry['type'];
        $text = htmlspecialchars($entry['text']);
        echo "<div class='log $class'>$text</div>";
    }
    echo '</div>
    <div class="footer">
        <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong> –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ' . count($output) . ', –£–¥–∞–ª–µ–Ω–æ: ' . $removedCount . ', –û–±–Ω–æ–≤–ª–µ–Ω–æ: ' . $updatedCount . '</p>
        <p><em>–ó–∞–ø—É—Å–∫: ' . date('Y-m-d H:i:s') . '</em></p>
    </div>
    </body>
    </html>';
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CLI
if ($isCli && $debug) {
    foreach ($output as $entry) {
        error_log("[cleanup.php] " . $entry['text']);
    }
}